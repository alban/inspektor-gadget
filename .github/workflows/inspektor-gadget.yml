name: Compile Inspektor Gadget
on:
  push:
  schedule:
    - cron: '0 2 * * *' # Night builds at 02:00

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      CONTAINER_REPO: ${{ secrets.CONTAINER_REPO }}
    steps:

    - name: Set up Go 1.16
      uses: actions/setup-go@v1
      with:
        go-version: 1.16
      id: go

    - name: Check out code
      uses: actions/checkout@v1

    - name: Cache external deps
      uses: actions/cache@v2
      with:
        # - Tests (tests.mk) need etcd, kube-apiserver, kubectl
        # - Generating code (crd.mk) needs controller-gen
        path: |
          bin/etcd
          bin/kube-apiserver
          bin/kubectl
          bin/controller-gen
        key: ${{ runner.os }}-${{ hashFiles('tests.mk', 'crd.mk', '.github/workflows/inspektor-gadget.yml') }}

    - name: Cache deb packages
      uses: actions/cache@v2
      id: cache-debs
      with:
          path: "~/cache-debs"
          key: cache-debs-libbpf-1:0.4.0-1ubuntu1-libseccomp-2.5.1-1ubuntu1~20.04.1

    - name: Install deb packages
      env:
        CACHE_HIT: ${{steps.cache-debs.outputs.cache-hit}}
        LIBBPF_VERSION: "1:0.4.0-1ubuntu1"
        LIBSECCOMP_VERSION: "2.5.1-1ubuntu1~20.04.1"
      run: |
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --verbose --force --recursive ~/cache-debs/* /
          else
            sudo apt install -y software-properties-common
            sudo add-apt-repository -y ppa:tuxinvader/kernel-build-tools
            sudo apt-get update
            sudo apt install -y libbpf-dev="$LIBBPF_VERSION" libseccomp-dev="$LIBSECCOMP_VERSION"
            mkdir -p ~/cache-debs
            sudo dpkg -L libbpf-dev libseccomp-dev | \
                while IFS= read -r f; do \
                    if test -f $f; then echo $f; fi; \
                done | xargs cp --parents --target-directory ~/cache-debs/
          fi

    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Set IMAGE_TAG
      run: |
        TMP1=${GITHUB_REF#*/}
        TMP2=${TMP1#*/}
        IMAGE_TAG=${TMP2//\//-}
        if [ "$IMAGE_TAG" = "main" ]; then
            IMAGE_TAG="latest"
        fi
        echo IMAGE_TAG=$IMAGE_TAG >> $GITHUB_ENV

    - name: Check if generated files are updated
      run: |
        make manifests generate
        git diff --exit-code HEAD --

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-single-buildx-${{ hashFiles('gadget.Dockerfile') }}
        restore-keys: |
          ${{ runner.os }}-single-buildx

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
        password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

    - name: Build gadget container
      uses: docker/build-push-action@v2
      with:
        context: .
        file: gadget.Dockerfile
        # TODO: how to avoid pushing a container before running integration tests
        push: true
        tags: ${{ secrets.CONTAINER_REPO }}:${{ env.IMAGE_TAG }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
    - name: Move Docker layers cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Build kubectl gadget Plugin
      run: |
        make kubectl-gadget

        # Prepare assets for release and actions artifacts

        platforms="darwin-amd64 linux-amd64 windows-amd64"
        for platform in $platforms; do
          mkdir $platform
          cp kubectl-gadget-$platform $platform/kubectl-gadget
          cp LICENSE $platform/
          tar --sort=name --owner=root:0 --group=root:0 \
            -czf inspektor-gadget-$platform.tar.gz -C $platform \
            kubectl-gadget LICENSE
        done

    - name: Basic unit tests
      run: |
        make test

    - name: Unit tests for the controller
      run: |
        make controller-tests

    - name: Unit tests for local-gadget (as root)
      run: |
        make local-gadget-tests

    - name: Setup Minikube
      uses: manusa/actions-setup-minikube@v2.4.2
      with:
        minikube version: 'v1.9.2'
        kubernetes version: 'v1.18.2'
        github token: ${{ secrets.GITHUB_TOKEN }}

    - name: Integration tests
      run: |
        echo "Using IMAGE_TAG=$IMAGE_TAG"

        TESTS_DOCKER_ARGS="-e KUBECONFIG=/root/.kube/config -v /home/runner/.kube:/root/.kube -v /home/runner/work/_temp/.minikube:/home/runner/work/_temp/.minikube" \
            make -C integration build test

        sed -i "s/latest/$IMAGE_TAG/g" integration/gadget-integration-tests-job.yaml

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload linux-amd64 Release Asset
      id: upload-release-asset-linux-amd64
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: inspektor-gadget-linux-amd64.tar.gz
        asset_name: inspektor-gadget-linux-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload darwin-amd64 Release Asset
      id: upload-release-asset-darwin-amd64
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: inspektor-gadget-darwin-amd64.tar.gz
        asset_name: inspektor-gadget-darwin-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload windows-amd64 Release Asset
      id: upload-release-asset-windows-amd64
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: inspektor-gadget-windows-amd64.tar.gz
        asset_name: inspektor-gadget-windows-amd64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Testing Asset
      id: upload-release-asset-testing
      uses: actions/upload-release-asset@v1.0.1
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: integration/gadget-integration-tests-job.yaml
        asset_name: gadget-integration-tests-job.yaml
        asset_content_type: application/x-yaml

    - name: Push Integration Test Image
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        make -C integration push

    - name: Update new version in krew-index
      if: startsWith(github.ref, 'refs/tags/v')
      uses: rajatjindal/krew-release-bot@v0.0.38
