// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package networktracer

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadDispatcherTailCallMap returns the embedded CollectionSpec for dispatcherTailCallMap.
func loadDispatcherTailCallMap() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_DispatcherTailCallMapBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load dispatcherTailCallMap: %w", err)
	}

	return spec, err
}

// loadDispatcherTailCallMapObjects loads dispatcherTailCallMap and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*dispatcherTailCallMapObjects
//	*dispatcherTailCallMapPrograms
//	*dispatcherTailCallMapMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadDispatcherTailCallMapObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadDispatcherTailCallMap()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// dispatcherTailCallMapSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherTailCallMapSpecs struct {
	dispatcherTailCallMapProgramSpecs
	dispatcherTailCallMapMapSpecs
}

// dispatcherTailCallMapSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherTailCallMapProgramSpecs struct {
}

// dispatcherTailCallMapMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type dispatcherTailCallMapMapSpecs struct {
	TailCall *ebpf.MapSpec `ebpf:"tail_call"`
}

// dispatcherTailCallMapObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherTailCallMapObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherTailCallMapObjects struct {
	dispatcherTailCallMapPrograms
	dispatcherTailCallMapMaps
}

func (o *dispatcherTailCallMapObjects) Close() error {
	return _DispatcherTailCallMapClose(
		&o.dispatcherTailCallMapPrograms,
		&o.dispatcherTailCallMapMaps,
	)
}

// dispatcherTailCallMapMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherTailCallMapObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherTailCallMapMaps struct {
	TailCall *ebpf.Map `ebpf:"tail_call"`
}

func (m *dispatcherTailCallMapMaps) Close() error {
	return _DispatcherTailCallMapClose(
		m.TailCall,
	)
}

// dispatcherTailCallMapPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadDispatcherTailCallMapObjects or ebpf.CollectionSpec.LoadAndAssign.
type dispatcherTailCallMapPrograms struct {
}

func (p *dispatcherTailCallMapPrograms) Close() error {
	return _DispatcherTailCallMapClose()
}

func _DispatcherTailCallMapClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed dispatchertailcallmap_bpfel.o
var _DispatcherTailCallMapBytes []byte
